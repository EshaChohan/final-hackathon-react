{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HARD BANK\\\\Documents\\\\ESHA FOLDER\\\\Hackathons\\\\Final Hackathon\\\\task-tracker\\\\src\\\\Taskboard.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from \"react\";\n// import Column from \"./Column\";\n\n// const initialTasks = [];\n\n// const stages = [\"To Do\", \"In Progress\", \"Done\"];\n\n// function TaskBoard() {\n//   const [tasks, setTasks] = useState(initialTasks);\n\n//   const addTask = (title, assignedTo) => {\n//     const newTask = {\n//       id: Date.now(),\n//       title,\n//       assignedTo,\n//       stage: \"To Do\",\n//     };\n//     setTasks([...tasks, newTask]);\n//   };\n\n//   const editTask = (id, newTitle, newAssignedTo) => {\n//     setTasks(tasks.map(t =>\n//       t.id === id ? { ...t, title: newTitle, assignedTo: newAssignedTo } : t\n//     ));\n//   };\n\n//   const deleteTask = (id) => {\n//     setTasks(tasks.filter(t => t.id !== id));\n//   };\n\n//   const moveTask = (id, direction) => {\n//     setTasks(tasks.map(t => {\n//       if (t.id === id) {\n//         const currentIndex = stages.indexOf(t.stage);\n//         const newIndex = currentIndex + direction;\n//         if (newIndex >= 0 && newIndex < stages.length) {\n//           return { ...t, stage: stages[newIndex] };\n//         }\n//       }\n//       return t;\n//     }));\n//   };\n\n//   return (\n//     <div className=\"board\">\n//       {stages.map(stage => (\n//         <Column\n//           key={stage}\n//           stage={stage}\n//           tasks={tasks.filter(task => task.stage === stage)}\n//           onAdd={addTask}\n//           onEdit={editTask}\n//           onDelete={deleteTask}\n//           onMove={moveTask}\n//         />\n//       ))}\n//     </div>\n//   );\n// }\n\n// export default TaskBoard;\n\nimport React, { useState } from \"react\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\nimport Column from \"./Column\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst stages = [\"To Do\", \"In Progress\", \"Done\"];\nfunction TaskBoard() {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  const addTask = (title, assignedTo) => {\n    const newTask = {\n      id: Date.now().toString(),\n      title,\n      assignedTo,\n      stage: \"To Do\"\n    };\n    setTasks(prev => [...prev, newTask]);\n  };\n  const editTask = (id, newTitle, newAssignedTo) => {\n    setTasks(prev => prev.map(task => task.id === id ? {\n      ...task,\n      title: newTitle,\n      assignedTo: newAssignedTo\n    } : task));\n  };\n  const deleteTask = id => {\n    setTasks(prev => prev.filter(task => task.id !== id));\n  };\n  const onDragEnd = result => {\n    if (!result.destination) return;\n    const updatedTasks = tasks.map(task => task.id === result.draggableId ? {\n      ...task,\n      stage: result.destination.droppableId\n    } : task);\n    setTasks(updatedTasks);\n  };\n  return /*#__PURE__*/_jsxDEV(DragDropContext, {\n    onDragEnd: onDragEnd,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board\",\n      children: stages.map(stage => /*#__PURE__*/_jsxDEV(Column, {\n        stage: stage,\n        tasks: tasks.filter(task => task.stage === stage),\n        addTask: addTask,\n        editTask: editTask,\n        deleteTask: deleteTask\n      }, stage, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n}\n_s(TaskBoard, \"+34uIVDBalDkucWnJ7Aj1Xxb0MA=\");\n_c = TaskBoard;\nexport default TaskBoard;\nvar _c;\n$RefreshReg$(_c, \"TaskBoard\");","map":{"version":3,"names":["React","useState","DragDropContext","Column","jsxDEV","_jsxDEV","stages","TaskBoard","_s","tasks","setTasks","addTask","title","assignedTo","newTask","id","Date","now","toString","stage","prev","editTask","newTitle","newAssignedTo","map","task","deleteTask","filter","onDragEnd","result","destination","updatedTasks","draggableId","droppableId","children","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/HARD BANK/Documents/ESHA FOLDER/Hackathons/Final Hackathon/task-tracker/src/Taskboard.js"],"sourcesContent":["// import React, { useState } from \"react\";\r\n// import Column from \"./Column\";\r\n\r\n// const initialTasks = [];\r\n\r\n// const stages = [\"To Do\", \"In Progress\", \"Done\"];\r\n\r\n// function TaskBoard() {\r\n//   const [tasks, setTasks] = useState(initialTasks);\r\n\r\n//   const addTask = (title, assignedTo) => {\r\n//     const newTask = {\r\n//       id: Date.now(),\r\n//       title,\r\n//       assignedTo,\r\n//       stage: \"To Do\",\r\n//     };\r\n//     setTasks([...tasks, newTask]);\r\n//   };\r\n\r\n//   const editTask = (id, newTitle, newAssignedTo) => {\r\n//     setTasks(tasks.map(t =>\r\n//       t.id === id ? { ...t, title: newTitle, assignedTo: newAssignedTo } : t\r\n//     ));\r\n//   };\r\n\r\n//   const deleteTask = (id) => {\r\n//     setTasks(tasks.filter(t => t.id !== id));\r\n//   };\r\n\r\n//   const moveTask = (id, direction) => {\r\n//     setTasks(tasks.map(t => {\r\n//       if (t.id === id) {\r\n//         const currentIndex = stages.indexOf(t.stage);\r\n//         const newIndex = currentIndex + direction;\r\n//         if (newIndex >= 0 && newIndex < stages.length) {\r\n//           return { ...t, stage: stages[newIndex] };\r\n//         }\r\n//       }\r\n//       return t;\r\n//     }));\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"board\">\r\n//       {stages.map(stage => (\r\n//         <Column\r\n//           key={stage}\r\n//           stage={stage}\r\n//           tasks={tasks.filter(task => task.stage === stage)}\r\n//           onAdd={addTask}\r\n//           onEdit={editTask}\r\n//           onDelete={deleteTask}\r\n//           onMove={moveTask}\r\n//         />\r\n//       ))}\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default TaskBoard;\r\n\r\nimport React, { useState } from \"react\";\r\nimport { DragDropContext } from \"react-beautiful-dnd\";\r\nimport Column from \"./Column\";\r\n\r\nconst stages = [\"To Do\", \"In Progress\", \"Done\"];\r\n\r\nfunction TaskBoard() {\r\n  const [tasks, setTasks] = useState([]);\r\n\r\n  const addTask = (title, assignedTo) => {\r\n    const newTask = {\r\n      id: Date.now().toString(),\r\n      title,\r\n      assignedTo,\r\n      stage: \"To Do\"\r\n    };\r\n    setTasks(prev => [...prev, newTask]);\r\n  };\r\n\r\n  const editTask = (id, newTitle, newAssignedTo) => {\r\n    setTasks(prev =>\r\n      prev.map(task =>\r\n        task.id === id\r\n          ? { ...task, title: newTitle, assignedTo: newAssignedTo }\r\n          : task\r\n      )\r\n    );\r\n  };\r\n\r\n  const deleteTask = id => {\r\n    setTasks(prev => prev.filter(task => task.id !== id));\r\n  };\r\n\r\n  const onDragEnd = result => {\r\n    if (!result.destination) return;\r\n    const updatedTasks = tasks.map(task =>\r\n      task.id === result.draggableId\r\n        ? { ...task, stage: result.destination.droppableId }\r\n        : task\r\n    );\r\n    setTasks(updatedTasks);\r\n  };\r\n\r\n  return (\r\n    <DragDropContext onDragEnd={onDragEnd}>\r\n      <div className=\"board\">\r\n        {stages.map(stage => (\r\n          <Column\r\n            key={stage}\r\n            stage={stage}\r\n            tasks={tasks.filter(task => task.stage === stage)}\r\n            addTask={addTask}\r\n            editTask={editTask}\r\n            deleteTask={deleteTask}\r\n          />\r\n        ))}\r\n      </div>\r\n    </DragDropContext>\r\n  );\r\n}\r\n\r\nexport default TaskBoard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}