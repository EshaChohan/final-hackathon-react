{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HARD BANK\\\\Documents\\\\ESHA FOLDER\\\\Hackathons\\\\Final Hackathon\\\\task-tracker\\\\src\\\\Taskboard.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from \"react\";\n// import Column from \"./Column\";\n\n// const initialTasks = [];\n\n// const stages = [\"To Do\", \"In Progress\", \"Done\"];\n\n// function TaskBoard() {\n//   const [tasks, setTasks] = useState(initialTasks);\n\n//   const addTask = (title, assignedTo) => {\n//     const newTask = {\n//       id: Date.now(),\n//       title,\n//       assignedTo,\n//       stage: \"To Do\",\n//     };\n//     setTasks([...tasks, newTask]);\n//   };\n\n//   const editTask = (id, newTitle, newAssignedTo) => {\n//     setTasks(tasks.map(t =>\n//       t.id === id ? { ...t, title: newTitle, assignedTo: newAssignedTo } : t\n//     ));\n//   };\n\n//   const deleteTask = (id) => {\n//     setTasks(tasks.filter(t => t.id !== id));\n//   };\n\n//   const moveTask = (id, direction) => {\n//     setTasks(tasks.map(t => {\n//       if (t.id === id) {\n//         const currentIndex = stages.indexOf(t.stage);\n//         const newIndex = currentIndex + direction;\n//         if (newIndex >= 0 && newIndex < stages.length) {\n//           return { ...t, stage: stages[newIndex] };\n//         }\n//       }\n//       return t;\n//     }));\n//   };\n\n//   return (\n//     <div className=\"board\">\n//       {stages.map(stage => (\n//         <Column\n//           key={stage}\n//           stage={stage}\n//           tasks={tasks.filter(task => task.stage === stage)}\n//           onAdd={addTask}\n//           onEdit={editTask}\n//           onDelete={deleteTask}\n//           onMove={moveTask}\n//         />\n//       ))}\n//     </div>\n//   );\n// }\n\n// export default TaskBoard;\n\nimport React, { useState } from 'react';\nimport { Droppable, Draggable } from 'react-beautiful-dnd';\nimport Column from './Column';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialTasks = [{\n  id: 'task-1',\n  title: 'Task 1',\n  assignedTo: 'User A',\n  stage: 'To Do'\n}, {\n  id: 'task-2',\n  title: 'Task 2',\n  assignedTo: 'User B',\n  stage: 'In Progress'\n}, {\n  id: 'task-3',\n  title: 'Task 3',\n  assignedTo: 'User C',\n  stage: 'Done'\n}];\nconst stages = ['To Do', 'In Progress', 'Done'];\nfunction TaskBoard() {\n  _s();\n  const [tasks, setTasks] = useState(initialTasks);\n  const onDragEnd = result => {\n    const {\n      destination,\n      source\n    } = result;\n    if (!destination) return;\n    const updatedTasks = Array.from(tasks);\n    const [movedTask] = updatedTasks.splice(source.index, 1);\n    movedTask.stage = destination.droppableId;\n    updatedTasks.splice(destination.index, 0, movedTask);\n    setTasks(updatedTasks);\n  };\n  return /*#__PURE__*/_jsxDEV(Droppable, {\n    droppableId: \"board\",\n    direction: \"horizontal\",\n    children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board\",\n      ref: provided.innerRef,\n      ...provided.droppableProps,\n      children: [stages.map((stage, index) => /*#__PURE__*/_jsxDEV(Column, {\n        stage: stage,\n        tasks: tasks.filter(task => task.stage === stage),\n        index: index\n      }, stage, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 13\n      }, this)), provided.placeholder]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n}\n_s(TaskBoard, \"SvIK8d5WT9y/c+LCOG3LNPDmSmQ=\");\n_c = TaskBoard;\nexport default TaskBoard;\nvar _c;\n$RefreshReg$(_c, \"TaskBoard\");","map":{"version":3,"names":["React","useState","Droppable","Draggable","Column","jsxDEV","_jsxDEV","initialTasks","id","title","assignedTo","stage","stages","TaskBoard","_s","tasks","setTasks","onDragEnd","result","destination","source","updatedTasks","Array","from","movedTask","splice","index","droppableId","direction","children","provided","className","ref","innerRef","droppableProps","map","filter","task","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/HARD BANK/Documents/ESHA FOLDER/Hackathons/Final Hackathon/task-tracker/src/Taskboard.js"],"sourcesContent":["// import React, { useState } from \"react\";\r\n// import Column from \"./Column\";\r\n\r\n// const initialTasks = [];\r\n\r\n// const stages = [\"To Do\", \"In Progress\", \"Done\"];\r\n\r\n// function TaskBoard() {\r\n//   const [tasks, setTasks] = useState(initialTasks);\r\n\r\n//   const addTask = (title, assignedTo) => {\r\n//     const newTask = {\r\n//       id: Date.now(),\r\n//       title,\r\n//       assignedTo,\r\n//       stage: \"To Do\",\r\n//     };\r\n//     setTasks([...tasks, newTask]);\r\n//   };\r\n\r\n//   const editTask = (id, newTitle, newAssignedTo) => {\r\n//     setTasks(tasks.map(t =>\r\n//       t.id === id ? { ...t, title: newTitle, assignedTo: newAssignedTo } : t\r\n//     ));\r\n//   };\r\n\r\n//   const deleteTask = (id) => {\r\n//     setTasks(tasks.filter(t => t.id !== id));\r\n//   };\r\n\r\n//   const moveTask = (id, direction) => {\r\n//     setTasks(tasks.map(t => {\r\n//       if (t.id === id) {\r\n//         const currentIndex = stages.indexOf(t.stage);\r\n//         const newIndex = currentIndex + direction;\r\n//         if (newIndex >= 0 && newIndex < stages.length) {\r\n//           return { ...t, stage: stages[newIndex] };\r\n//         }\r\n//       }\r\n//       return t;\r\n//     }));\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"board\">\r\n//       {stages.map(stage => (\r\n//         <Column\r\n//           key={stage}\r\n//           stage={stage}\r\n//           tasks={tasks.filter(task => task.stage === stage)}\r\n//           onAdd={addTask}\r\n//           onEdit={editTask}\r\n//           onDelete={deleteTask}\r\n//           onMove={moveTask}\r\n//         />\r\n//       ))}\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default TaskBoard;\r\n\r\nimport React, { useState } from 'react';\r\nimport { Droppable, Draggable } from 'react-beautiful-dnd';\r\nimport Column from './Column';\r\n\r\nconst initialTasks = [\r\n  { id: 'task-1', title: 'Task 1', assignedTo: 'User A', stage: 'To Do' },\r\n  { id: 'task-2', title: 'Task 2', assignedTo: 'User B', stage: 'In Progress' },\r\n  { id: 'task-3', title: 'Task 3', assignedTo: 'User C', stage: 'Done' },\r\n];\r\n\r\nconst stages = ['To Do', 'In Progress', 'Done'];\r\n\r\nfunction TaskBoard() {\r\n  const [tasks, setTasks] = useState(initialTasks);\r\n\r\n  const onDragEnd = (result) => {\r\n    const { destination, source } = result;\r\n    if (!destination) return;\r\n\r\n    const updatedTasks = Array.from(tasks);\r\n    const [movedTask] = updatedTasks.splice(source.index, 1);\r\n    movedTask.stage = destination.droppableId;\r\n    updatedTasks.splice(destination.index, 0, movedTask);\r\n\r\n    setTasks(updatedTasks);\r\n  };\r\n\r\n  return (\r\n    <Droppable droppableId=\"board\" direction=\"horizontal\">\r\n      {(provided) => (\r\n        <div\r\n          className=\"board\"\r\n          ref={provided.innerRef}\r\n          {...provided.droppableProps}\r\n        >\r\n          {stages.map((stage, index) => (\r\n            <Column\r\n              key={stage}\r\n              stage={stage}\r\n              tasks={tasks.filter((task) => task.stage === stage)}\r\n              index={index}\r\n            />\r\n          ))}\r\n          {provided.placeholder}\r\n        </div>\r\n      )}\r\n    </Droppable>\r\n  );\r\n}\r\n\r\nexport default TaskBoard;\r\n"],"mappings":";;AAAA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,SAAS,EAAEC,SAAS,QAAQ,qBAAqB;AAC1D,OAAOC,MAAM,MAAM,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9B,MAAMC,YAAY,GAAG,CACnB;EAAEC,EAAE,EAAE,QAAQ;EAAEC,KAAK,EAAE,QAAQ;EAAEC,UAAU,EAAE,QAAQ;EAAEC,KAAK,EAAE;AAAQ,CAAC,EACvE;EAAEH,EAAE,EAAE,QAAQ;EAAEC,KAAK,EAAE,QAAQ;EAAEC,UAAU,EAAE,QAAQ;EAAEC,KAAK,EAAE;AAAc,CAAC,EAC7E;EAAEH,EAAE,EAAE,QAAQ;EAAEC,KAAK,EAAE,QAAQ;EAAEC,UAAU,EAAE,QAAQ;EAAEC,KAAK,EAAE;AAAO,CAAC,CACvE;AAED,MAAMC,MAAM,GAAG,CAAC,OAAO,EAAE,aAAa,EAAE,MAAM,CAAC;AAE/C,SAASC,SAASA,CAAA,EAAG;EAAAC,EAAA;EACnB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGf,QAAQ,CAACM,YAAY,CAAC;EAEhD,MAAMU,SAAS,GAAIC,MAAM,IAAK;IAC5B,MAAM;MAAEC,WAAW;MAAEC;IAAO,CAAC,GAAGF,MAAM;IACtC,IAAI,CAACC,WAAW,EAAE;IAElB,MAAME,YAAY,GAAGC,KAAK,CAACC,IAAI,CAACR,KAAK,CAAC;IACtC,MAAM,CAACS,SAAS,CAAC,GAAGH,YAAY,CAACI,MAAM,CAACL,MAAM,CAACM,KAAK,EAAE,CAAC,CAAC;IACxDF,SAAS,CAACb,KAAK,GAAGQ,WAAW,CAACQ,WAAW;IACzCN,YAAY,CAACI,MAAM,CAACN,WAAW,CAACO,KAAK,EAAE,CAAC,EAAEF,SAAS,CAAC;IAEpDR,QAAQ,CAACK,YAAY,CAAC;EACxB,CAAC;EAED,oBACEf,OAAA,CAACJ,SAAS;IAACyB,WAAW,EAAC,OAAO;IAACC,SAAS,EAAC,YAAY;IAAAC,QAAA,EACjDC,QAAQ,iBACRxB,OAAA;MACEyB,SAAS,EAAC,OAAO;MACjBC,GAAG,EAAEF,QAAQ,CAACG,QAAS;MAAA,GACnBH,QAAQ,CAACI,cAAc;MAAAL,QAAA,GAE1BjB,MAAM,CAACuB,GAAG,CAAC,CAACxB,KAAK,EAAEe,KAAK,kBACvBpB,OAAA,CAACF,MAAM;QAELO,KAAK,EAAEA,KAAM;QACbI,KAAK,EAAEA,KAAK,CAACqB,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAAC1B,KAAK,KAAKA,KAAK,CAAE;QACpDe,KAAK,EAAEA;MAAM,GAHRf,KAAK;QAAA2B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAIX,CACF,CAAC,EACDX,QAAQ,CAACY,WAAW;IAAA;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClB;EACN;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACQ,CAAC;AAEhB;AAAC3B,EAAA,CApCQD,SAAS;AAAA8B,EAAA,GAAT9B,SAAS;AAsClB,eAAeA,SAAS;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}