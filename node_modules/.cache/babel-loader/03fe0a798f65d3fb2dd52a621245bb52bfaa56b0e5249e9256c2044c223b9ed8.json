{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HARD BANK\\\\Documents\\\\ESHA FOLDER\\\\Hackathons\\\\Final Hackathon\\\\task-tracker\\\\src\\\\pages\\\\Taskcard.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from \"react\";\n\n// function TaskCard({ task, onEdit, onDelete, onMove }) {\n//   const [isEditing, setIsEditing] = useState(false);\n//   const [title, setTitle] = useState(task.title);\n//   const [assignedTo, setAssignedTo] = useState(task.assignedTo);\n\n//   const saveEdit = () => {\n//     onEdit(task.id, title, assignedTo);\n//     setIsEditing(false);\n//   };\n\n//   return (\n//     <div className=\"task-card\">\n//       {isEditing ? (\n//         <>\n//           <input value={title} onChange={e => setTitle(e.target.value)} />\n//           <input value={assignedTo} onChange={e => setAssignedTo(e.target.value)} />\n//           <button onClick={saveEdit}>Save</button>\n//         </>\n//       ) : (\n//         <>\n//           <h4>{task.title}</h4>\n//           <p>Assigned to: {task.assignedTo || \"Unassigned\"}</p>\n//           <div className=\"actions\">\n//             <button onClick={() => setIsEditing(true)}>Edit</button>\n//             <button onClick={() => onDelete(task.id)}>Delete</button>\n//             <button onClick={() => onMove(task.id, -1)}>←</button>\n//             <button onClick={() => onMove(task.id, 1)}>→</button>\n//           </div>\n//         </>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default TaskCard;\n\n// SOCOND CODE\n\n// import React, { useState } from 'react';\n\n// const TaskCard = ({ task, moveTask, deleteTask, editTask, assignPerson }) => {\n//   const [editing, setEditing] = useState(false);\n//   const [newTitle, setNewTitle] = useState(task.title);\n\n//   // Handle title edit\n//   const handleEditTitle = () => {\n//     editTask(task.id, newTitle);\n//     setEditing(false);  // Close edit mode\n//   };\n\n//   return (\n//     <div className=\"task-card\">\n//       <div>\n//         {/* If editing, show input box; otherwise, show task title */}\n//         {editing ? (\n//           <div>\n//             <input\n//               type=\"text\"\n//               value={newTitle}\n//               onChange={(e) => setNewTitle(e.target.value)}  // Handle title change\n//             />\n//             <button onClick={handleEditTitle}>Save</button>\n//           </div>\n//         ) : (\n//           <h3 onClick={() => setEditing(true)}>{task.title}</h3>\n//         )}\n//       </div>\n\n//       <div>\n//         <strong>Assigned to: </strong>\n//         <span>{task.assignedTo}</span>\n//         {/* Dropdown to assign person */}\n//         {/* <select \n//           onChange={(e) => assignPerson(task.id, e.target.value)} \n//           value={task.assignedTo}\n//         >\n//           <option value=\"Unassigned\">Unassigned</option>\n//           <option value=\"Alice\">Alice</option>\n//           <option value=\"Bob\">Bob</option>\n//           <option value=\"Charlie\">Charlie</option>\n//         </select> */}\n//       </div>\n\n//       <div className=\"task-actions\">\n//         {/* Move task buttons */}\n//         {task.stage !== 'To Do' && <button onClick={() => moveTask(task.id, 'To Do')}>To Do</button>}\n//         {task.stage !== 'In Progress' && <button onClick={() => moveTask(task.id, 'In Progress')}>In Progress</button>}\n//         {task.stage !== 'Done' && <button onClick={() => moveTask(task.id, 'Done')}>Done</button>}\n\n//         {/* Delete task */}\n//         <button onClick={() => deleteTask(task.id)}>Delete</button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default TaskCard;\n\n// THIRD CODE \n\n// import React, { useState } from 'react';\n\n// const TaskCard = ({ task, moveTask, deleteTask, editTask, assignPerson }) => {\n//   const [isEditing, setIsEditing] = useState(false);  // Track if the task is being edited\n//   const [newTitle, setNewTitle] = useState(task.title);  // Input value for the new task title\n//    const [assignedPerson, setAssignedPerson] = useState('');  // Person assigned to task\n\n//   // Handle editing task title\n//   const handleEditTitle = () => {\n//     if (newTitle.trim()) {\n//       editTask(task.id, newTitle);  // Save the new title\n//       setIsEditing(false);  // Exit edit mode\n//     }\n//   };\n\n//   return (\n//     <div className=\"task-card\">\n//       <div>\n//         {/* If editing, show input; otherwise, show task title */}\n//         {isEditing? (\n//           <div>\n//             <input\n//               type=\"text\"\n//               value={newTitle}\n//               onChange={(e) => setNewTitle(e.target.value)}  // Update title while editing\n//             />\n//              <input\n//         type=\"text\"\n//         value={assignedPerson}\n//         onChange={(e) => setAssignedPerson(e.target.value)}  // Update task title input\n//         placeholder=\"assigned...\"\n//       />\n//             <button onClick={handleEditTitle}>Save</button>\n//           </div>\n//         ) \n//         : (\n//           <h3>{task.title}</h3>  // Click to edit\n\n//         )\n// }\n\n//       </div>\n\n//       <div>\n//         <strong>Assigned to: </strong>\n//         <span>{task.assignedTo}</span>\n//         {/* Dropdown to assign person\n//         <select \n//           onChange={(e) => assignPerson(task.id, e.target.value)} \n//           value={task.assignedTo}\n//         >\n//           <option value=\"Unassigned\">Unassigned</option>\n//           <option value=\"Alice\">Alice</option>\n//           <option value=\"Bob\">Bob</option>\n//           <option value=\"Charlie\">Charlie</option>\n//         </select> */}\n//       </div>\n\n//       <div className=\"task-actions\">\n//         {/* Move task buttons */}\n//         {task.stage !== 'To Do' && <button onClick={() => moveTask(task.id, 'To Do')}>To Do</button>}\n//         {task.stage !== 'In Progress' && <button onClick={() => moveTask(task.id, 'In Progress')}>In Progress</button>}\n//         {task.stage !== 'Done' && <button onClick={() => moveTask(task.id, 'Done')}>Done</button>}\n\n//         {/* Delete task */}\n//         <button onClick={() => deleteTask(task.id)}>Delete</button>\n//         <button onClick={() => setIsEditing(true)}>Edit</button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default TaskCard;\n\n// FOURTH CODE\n// import React, { useState, useEffect } from 'react';\n\n// const TaskCard = ({ task, moveTask, deleteTask, editTask, assignPerson }) => {\n//   const [isEditing, setIsEditing] = useState(false);\n//   const [editedTitle, setEditedTitle] = useState(task.title);\n//   const [editedPerson, setEditedPerson] = useState(task.assignedTo);\n\n//   // Sync local state with props when entering edit mode\n// //   useEffect(() => {\n// //     if (isEditing) {\n// //       setEditedTitle(task.title);\n// //       setEditedPerson(task.assignedTo);\n// //     }\n// //   }, [isEditing, task.title, task.assignedTo]);\n// useEffect(() => {\n//     if (isEditing) {\n//       setEditedTitle(task.title);\n//       setEditedPerson(task.assignedTo);\n//     }\n//     // Only run when edit mode is toggled\n//   }, [isEditing]);\n\n//   const handleSave = () => {\n//     if (editedTitle.trim()) {\n//       editTask(task.id, editedTitle);\n//       assignPerson(task.id, editedPerson);\n//       setIsEditing(false);\n//     }\n//   };\n\n//   return (\n//     <div className=\"task-card\">\n//       {isEditing ? (\n//         <>\n//           <input\n//             type=\"text\"\n//             value={editedTitle}\n//             onChange={(e) => setEditedTitle(e.target.value)}\n//             placeholder=\"Edit task title\"\n//           />\n//           <input\n//         type=\"text\"\n//         value={editedPerson}\n//         onChange={(e) => setEditedPerson(e.target.value)}  // Update task title input\n//         placeholder=\"assigned...\"\n//       />\n//           {/* <select\n//             value={editedPerson}\n//             onChange={(e) => setEditedPerson(e.target.value)}\n//           >\n//             <option value=\"Unassigned\">Unassigned</option>\n//             <option value=\"Alice\">Alice</option>\n//             <option value=\"Bob\">Bob</option>\n//             <option value=\"Charlie\">Charlie</option>\n//           </select> */}\n//           <button onClick={handleSave}>Save</button>\n//           <button onClick={() => setIsEditing(false)}>Cancel</button>\n//         </>\n//       ) : (\n//         <>\n//           <h3>{task.title}</h3>\n//           <p><strong>Assigned to:</strong> {task.assignedTo}</p>\n//         </>\n//       )}\n\n//       <div className=\"task-actions\">\n//         {task.stage !== 'To Do' && <button onClick={() => moveTask(task.id, 'To Do')}>To Do</button>}\n//         {task.stage !== 'In Progress' && <button onClick={() => moveTask(task.id, 'In Progress')}>In Progress</button>}\n//         {task.stage !== 'Done' && <button onClick={() => moveTask(task.id, 'Done')}>Done</button>}\n//         <button onClick={() => deleteTask(task.id)}>Delete</button>\n//         <button onClick={() => setIsEditing(true)}>Edit</button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default TaskCard;\n\n// FIFTH CODE\nimport React, { useState, useEffect } from 'react';\nimport '../tracker.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TaskCard = ({\n  task,\n  moveTask,\n  deleteTask,\n  editTask,\n  assignPerson\n}) => {\n  _s();\n  const [isEditing, setIsEditing] = useState(false);\n  const [editedTitle, setEditedTitle] = useState(task.title);\n  const [editedPerson, setEditedPerson] = useState(task.assignedTo);\n  // Fix: only run once when editing starts\n  useEffect(() => {\n    if (isEditing) {\n      setEditedTitle(task.title);\n      setEditedPerson(task.assignedTo);\n    }\n  }, [isEditing]);\n  const handleSave = () => {\n    if (editedTitle.trim()) {\n      editTask(task.id, editedTitle);\n      assignPerson(task.id, editedPerson);\n      setIsEditing(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"task-card\",\n    children: [isEditing ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: editedTitle,\n        onChange: e => setEditedTitle(e.target.value),\n        placeholder: \"Edit task title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: editedPerson,\n        onChange: e => setEditedPerson(e.target.value),\n        placeholder: \"Assigned to...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSave,\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setIsEditing(false),\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Task: \", /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            fontSize: '15px'\n          },\n          children: task.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Assigned to:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 14\n        }, this), \" \", task.assignedTo]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"task-actions\",\n      children: [task.stage !== 'To Do' && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => moveTask(task.id, 'To Do'),\n        children: \"To Do\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 36\n      }, this), task.stage !== 'In Progress' && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => moveTask(task.id, 'In Progress'),\n        children: \"In Progress\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 42\n      }, this), task.stage !== 'Done' && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => moveTask(task.id, 'Done'),\n        children: \"Done\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 35\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => deleteTask(task.id),\n        children: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setIsEditing(true),\n        children: \"Edit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 282,\n    columnNumber: 5\n  }, this);\n};\n_s(TaskCard, \"NILh4qtBlgmA39c9B0bHveIwzyg=\");\n_c = TaskCard;\nexport default TaskCard;\nvar _c;\n$RefreshReg$(_c, \"TaskCard\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","TaskCard","task","moveTask","deleteTask","editTask","assignPerson","_s","isEditing","setIsEditing","editedTitle","setEditedTitle","title","editedPerson","setEditedPerson","assignedTo","handleSave","trim","id","className","children","type","value","onChange","e","target","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","onClick","style","fontSize","stage","_c","$RefreshReg$"],"sources":["C:/Users/HARD BANK/Documents/ESHA FOLDER/Hackathons/Final Hackathon/task-tracker/src/pages/Taskcard.js"],"sourcesContent":["// import React, { useState } from \"react\";\r\n\r\n// function TaskCard({ task, onEdit, onDelete, onMove }) {\r\n//   const [isEditing, setIsEditing] = useState(false);\r\n//   const [title, setTitle] = useState(task.title);\r\n//   const [assignedTo, setAssignedTo] = useState(task.assignedTo);\r\n\r\n//   const saveEdit = () => {\r\n//     onEdit(task.id, title, assignedTo);\r\n//     setIsEditing(false);\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"task-card\">\r\n//       {isEditing ? (\r\n//         <>\r\n//           <input value={title} onChange={e => setTitle(e.target.value)} />\r\n//           <input value={assignedTo} onChange={e => setAssignedTo(e.target.value)} />\r\n//           <button onClick={saveEdit}>Save</button>\r\n//         </>\r\n//       ) : (\r\n//         <>\r\n//           <h4>{task.title}</h4>\r\n//           <p>Assigned to: {task.assignedTo || \"Unassigned\"}</p>\r\n//           <div className=\"actions\">\r\n//             <button onClick={() => setIsEditing(true)}>Edit</button>\r\n//             <button onClick={() => onDelete(task.id)}>Delete</button>\r\n//             <button onClick={() => onMove(task.id, -1)}>←</button>\r\n//             <button onClick={() => onMove(task.id, 1)}>→</button>\r\n//           </div>\r\n//         </>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default TaskCard;\r\n\r\n  // SOCOND CODE\r\n\r\n// import React, { useState } from 'react';\r\n\r\n// const TaskCard = ({ task, moveTask, deleteTask, editTask, assignPerson }) => {\r\n//   const [editing, setEditing] = useState(false);\r\n//   const [newTitle, setNewTitle] = useState(task.title);\r\n\r\n//   // Handle title edit\r\n//   const handleEditTitle = () => {\r\n//     editTask(task.id, newTitle);\r\n//     setEditing(false);  // Close edit mode\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"task-card\">\r\n//       <div>\r\n//         {/* If editing, show input box; otherwise, show task title */}\r\n//         {editing ? (\r\n//           <div>\r\n//             <input\r\n//               type=\"text\"\r\n//               value={newTitle}\r\n//               onChange={(e) => setNewTitle(e.target.value)}  // Handle title change\r\n//             />\r\n//             <button onClick={handleEditTitle}>Save</button>\r\n//           </div>\r\n//         ) : (\r\n//           <h3 onClick={() => setEditing(true)}>{task.title}</h3>\r\n//         )}\r\n//       </div>\r\n\r\n//       <div>\r\n//         <strong>Assigned to: </strong>\r\n//         <span>{task.assignedTo}</span>\r\n//         {/* Dropdown to assign person */}\r\n//         {/* <select \r\n//           onChange={(e) => assignPerson(task.id, e.target.value)} \r\n//           value={task.assignedTo}\r\n//         >\r\n//           <option value=\"Unassigned\">Unassigned</option>\r\n//           <option value=\"Alice\">Alice</option>\r\n//           <option value=\"Bob\">Bob</option>\r\n//           <option value=\"Charlie\">Charlie</option>\r\n//         </select> */}\r\n//       </div>\r\n\r\n//       <div className=\"task-actions\">\r\n//         {/* Move task buttons */}\r\n//         {task.stage !== 'To Do' && <button onClick={() => moveTask(task.id, 'To Do')}>To Do</button>}\r\n//         {task.stage !== 'In Progress' && <button onClick={() => moveTask(task.id, 'In Progress')}>In Progress</button>}\r\n//         {task.stage !== 'Done' && <button onClick={() => moveTask(task.id, 'Done')}>Done</button>}\r\n\r\n//         {/* Delete task */}\r\n//         <button onClick={() => deleteTask(task.id)}>Delete</button>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default TaskCard;\r\n\r\n// THIRD CODE \r\n\r\n// import React, { useState } from 'react';\r\n\r\n// const TaskCard = ({ task, moveTask, deleteTask, editTask, assignPerson }) => {\r\n//   const [isEditing, setIsEditing] = useState(false);  // Track if the task is being edited\r\n//   const [newTitle, setNewTitle] = useState(task.title);  // Input value for the new task title\r\n//    const [assignedPerson, setAssignedPerson] = useState('');  // Person assigned to task\r\n\r\n//   // Handle editing task title\r\n//   const handleEditTitle = () => {\r\n//     if (newTitle.trim()) {\r\n//       editTask(task.id, newTitle);  // Save the new title\r\n//       setIsEditing(false);  // Exit edit mode\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"task-card\">\r\n//       <div>\r\n//         {/* If editing, show input; otherwise, show task title */}\r\n//         {isEditing? (\r\n//           <div>\r\n//             <input\r\n//               type=\"text\"\r\n//               value={newTitle}\r\n//               onChange={(e) => setNewTitle(e.target.value)}  // Update title while editing\r\n//             />\r\n//              <input\r\n//         type=\"text\"\r\n//         value={assignedPerson}\r\n//         onChange={(e) => setAssignedPerson(e.target.value)}  // Update task title input\r\n//         placeholder=\"assigned...\"\r\n//       />\r\n//             <button onClick={handleEditTitle}>Save</button>\r\n//           </div>\r\n//         ) \r\n//         : (\r\n//           <h3>{task.title}</h3>  // Click to edit\r\n        \r\n//         )\r\n// }\r\n\r\n        \r\n//       </div>\r\n\r\n//       <div>\r\n//         <strong>Assigned to: </strong>\r\n//         <span>{task.assignedTo}</span>\r\n//         {/* Dropdown to assign person\r\n//         <select \r\n//           onChange={(e) => assignPerson(task.id, e.target.value)} \r\n//           value={task.assignedTo}\r\n//         >\r\n//           <option value=\"Unassigned\">Unassigned</option>\r\n//           <option value=\"Alice\">Alice</option>\r\n//           <option value=\"Bob\">Bob</option>\r\n//           <option value=\"Charlie\">Charlie</option>\r\n//         </select> */}\r\n//       </div>\r\n\r\n//       <div className=\"task-actions\">\r\n//         {/* Move task buttons */}\r\n//         {task.stage !== 'To Do' && <button onClick={() => moveTask(task.id, 'To Do')}>To Do</button>}\r\n//         {task.stage !== 'In Progress' && <button onClick={() => moveTask(task.id, 'In Progress')}>In Progress</button>}\r\n//         {task.stage !== 'Done' && <button onClick={() => moveTask(task.id, 'Done')}>Done</button>}\r\n\r\n//         {/* Delete task */}\r\n//         <button onClick={() => deleteTask(task.id)}>Delete</button>\r\n//         <button onClick={() => setIsEditing(true)}>Edit</button>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default TaskCard;\r\n\r\n// FOURTH CODE\r\n// import React, { useState, useEffect } from 'react';\r\n\r\n// const TaskCard = ({ task, moveTask, deleteTask, editTask, assignPerson }) => {\r\n//   const [isEditing, setIsEditing] = useState(false);\r\n//   const [editedTitle, setEditedTitle] = useState(task.title);\r\n//   const [editedPerson, setEditedPerson] = useState(task.assignedTo);\r\n\r\n//   // Sync local state with props when entering edit mode\r\n// //   useEffect(() => {\r\n// //     if (isEditing) {\r\n// //       setEditedTitle(task.title);\r\n// //       setEditedPerson(task.assignedTo);\r\n// //     }\r\n// //   }, [isEditing, task.title, task.assignedTo]);\r\n// useEffect(() => {\r\n//     if (isEditing) {\r\n//       setEditedTitle(task.title);\r\n//       setEditedPerson(task.assignedTo);\r\n//     }\r\n//     // Only run when edit mode is toggled\r\n//   }, [isEditing]);\r\n\r\n//   const handleSave = () => {\r\n//     if (editedTitle.trim()) {\r\n//       editTask(task.id, editedTitle);\r\n//       assignPerson(task.id, editedPerson);\r\n//       setIsEditing(false);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"task-card\">\r\n//       {isEditing ? (\r\n//         <>\r\n//           <input\r\n//             type=\"text\"\r\n//             value={editedTitle}\r\n//             onChange={(e) => setEditedTitle(e.target.value)}\r\n//             placeholder=\"Edit task title\"\r\n//           />\r\n//           <input\r\n//         type=\"text\"\r\n//         value={editedPerson}\r\n//         onChange={(e) => setEditedPerson(e.target.value)}  // Update task title input\r\n//         placeholder=\"assigned...\"\r\n//       />\r\n//           {/* <select\r\n//             value={editedPerson}\r\n//             onChange={(e) => setEditedPerson(e.target.value)}\r\n//           >\r\n//             <option value=\"Unassigned\">Unassigned</option>\r\n//             <option value=\"Alice\">Alice</option>\r\n//             <option value=\"Bob\">Bob</option>\r\n//             <option value=\"Charlie\">Charlie</option>\r\n//           </select> */}\r\n//           <button onClick={handleSave}>Save</button>\r\n//           <button onClick={() => setIsEditing(false)}>Cancel</button>\r\n//         </>\r\n//       ) : (\r\n//         <>\r\n//           <h3>{task.title}</h3>\r\n//           <p><strong>Assigned to:</strong> {task.assignedTo}</p>\r\n//         </>\r\n//       )}\r\n\r\n//       <div className=\"task-actions\">\r\n//         {task.stage !== 'To Do' && <button onClick={() => moveTask(task.id, 'To Do')}>To Do</button>}\r\n//         {task.stage !== 'In Progress' && <button onClick={() => moveTask(task.id, 'In Progress')}>In Progress</button>}\r\n//         {task.stage !== 'Done' && <button onClick={() => moveTask(task.id, 'Done')}>Done</button>}\r\n//         <button onClick={() => deleteTask(task.id)}>Delete</button>\r\n//         <button onClick={() => setIsEditing(true)}>Edit</button>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default TaskCard;\r\n\r\n\r\n// FIFTH CODE\r\nimport React, { useState, useEffect } from 'react';\r\nimport '../tracker.css';\r\nconst TaskCard = ({ task, moveTask, deleteTask, editTask, assignPerson }) => {\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  const [editedTitle, setEditedTitle] = useState(task.title);\r\n  const [editedPerson, setEditedPerson] = useState(task.assignedTo);\r\n  // Fix: only run once when editing starts\r\n  useEffect(() => {\r\n    if (isEditing) {\r\n      setEditedTitle(task.title);\r\n      setEditedPerson(task.assignedTo);\r\n    }\r\n  }, [isEditing]);\r\n\r\n  const handleSave = () => {\r\n    if (editedTitle.trim()) {\r\n      editTask(task.id, editedTitle);\r\n      assignPerson(task.id, editedPerson);\r\n      setIsEditing(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"task-card\">\r\n      {isEditing ? (\r\n        <>\r\n          <input\r\n            type=\"text\"\r\n            value={editedTitle}\r\n            onChange={(e) => setEditedTitle(e.target.value)}\r\n            placeholder=\"Edit task title\"\r\n          />\r\n          <input\r\n            type=\"text\"\r\n            value={editedPerson}\r\n            onChange={(e) => setEditedPerson(e.target.value)}\r\n            placeholder=\"Assigned to...\"\r\n          />\r\n          <button onClick={handleSave}>Save</button>\r\n          <button onClick={() => setIsEditing(false)}>Cancel</button>\r\n        </>\r\n      ) : (\r\n        <>\r\n          <h3>Task: <span style={{fontSize:'15px'}}>{task.title}</span></h3>\r\n          <p><strong>Assigned to:</strong> {task.assignedTo}</p>\r\n        </>\r\n      )}\r\n\r\n      <div className=\"task-actions\">\r\n        {task.stage !== 'To Do' && <button onClick={() => moveTask(task.id, 'To Do')}>To Do</button>}\r\n        {task.stage !== 'In Progress' && <button onClick={() => moveTask(task.id, 'In Progress')}>In Progress</button>}\r\n        {task.stage !== 'Done' && <button onClick={() => moveTask(task.id, 'Done')}>Done</button>}\r\n        <button onClick={() => deleteTask(task.id)}>Delete</button>\r\n        <button onClick={() => setIsEditing(true)}>Edit</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TaskCard;\r\n"],"mappings":";;AAAA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEE;;AAEF;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}