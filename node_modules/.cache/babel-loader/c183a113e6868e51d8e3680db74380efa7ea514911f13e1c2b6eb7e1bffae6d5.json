{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HARD BANK\\\\Documents\\\\ESHA FOLDER\\\\Hackathons\\\\Final Hackathon\\\\task-tracker\\\\src\\\\Taskcard.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from \"react\";\n\n// function TaskCard({ task, onEdit, onDelete, onMove }) {\n//   const [isEditing, setIsEditing] = useState(false);\n//   const [title, setTitle] = useState(task.title);\n//   const [assignedTo, setAssignedTo] = useState(task.assignedTo);\n\n//   const saveEdit = () => {\n//     onEdit(task.id, title, assignedTo);\n//     setIsEditing(false);\n//   };\n\n//   return (\n//     <div className=\"task-card\">\n//       {isEditing ? (\n//         <>\n//           <input value={title} onChange={e => setTitle(e.target.value)} />\n//           <input value={assignedTo} onChange={e => setAssignedTo(e.target.value)} />\n//           <button onClick={saveEdit}>Save</button>\n//         </>\n//       ) : (\n//         <>\n//           <h4>{task.title}</h4>\n//           <p>Assigned to: {task.assignedTo || \"Unassigned\"}</p>\n//           <div className=\"actions\">\n//             <button onClick={() => setIsEditing(true)}>Edit</button>\n//             <button onClick={() => onDelete(task.id)}>Delete</button>\n//             <button onClick={() => onMove(task.id, -1)}>←</button>\n//             <button onClick={() => onMove(task.id, 1)}>→</button>\n//           </div>\n//         </>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default TaskCard;\n\n// SOCOND CODE\n\n// import React, { useState } from 'react';\n\n// const TaskCard = ({ task, moveTask, deleteTask, editTask, assignPerson }) => {\n//   const [editing, setEditing] = useState(false);\n//   const [newTitle, setNewTitle] = useState(task.title);\n\n//   // Handle title edit\n//   const handleEditTitle = () => {\n//     editTask(task.id, newTitle);\n//     setEditing(false);  // Close edit mode\n//   };\n\n//   return (\n//     <div className=\"task-card\">\n//       <div>\n//         {/* If editing, show input box; otherwise, show task title */}\n//         {editing ? (\n//           <div>\n//             <input\n//               type=\"text\"\n//               value={newTitle}\n//               onChange={(e) => setNewTitle(e.target.value)}  // Handle title change\n//             />\n//             <button onClick={handleEditTitle}>Save</button>\n//           </div>\n//         ) : (\n//           <h3 onClick={() => setEditing(true)}>{task.title}</h3>\n//         )}\n//       </div>\n\n//       <div>\n//         <strong>Assigned to: </strong>\n//         <span>{task.assignedTo}</span>\n//         {/* Dropdown to assign person */}\n//         {/* <select \n//           onChange={(e) => assignPerson(task.id, e.target.value)} \n//           value={task.assignedTo}\n//         >\n//           <option value=\"Unassigned\">Unassigned</option>\n//           <option value=\"Alice\">Alice</option>\n//           <option value=\"Bob\">Bob</option>\n//           <option value=\"Charlie\">Charlie</option>\n//         </select> */}\n//       </div>\n\n//       <div className=\"task-actions\">\n//         {/* Move task buttons */}\n//         {task.stage !== 'To Do' && <button onClick={() => moveTask(task.id, 'To Do')}>To Do</button>}\n//         {task.stage !== 'In Progress' && <button onClick={() => moveTask(task.id, 'In Progress')}>In Progress</button>}\n//         {task.stage !== 'Done' && <button onClick={() => moveTask(task.id, 'Done')}>Done</button>}\n\n//         {/* Delete task */}\n//         <button onClick={() => deleteTask(task.id)}>Delete</button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default TaskCard;\n\n// THIRD CODE \n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskCard = ({\n  task,\n  moveTask,\n  deleteTask,\n  editTask,\n  assignPerson\n}) => {\n  _s();\n  const [isEditing, setIsEditing] = useState(false); // Track if the task is being edited\n  const [newTitle, setNewTitle] = useState(task.title); // Input value for the new task title\n  const [assignedPerson, setAssignedPerson] = useState(''); // Person assigned to task\n\n  // Handle editing task title\n  const handleEditTitle = () => {\n    if (newTitle.trim()) {\n      editTask(task.id, newTitle); // Save the new title\n      setIsEditing(false); // Exit edit mode\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"task-card\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: isEditing ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: newTitle,\n          style: {\n            width: ''\n          },\n          onChange: e => setNewTitle(e.target.value) // Update title while editing\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: assignedPerson,\n          onChange: e => setAssignedPerson(e.target.value) // Update task title input\n          ,\n          placeholder: \"assigned...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 14\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleEditTitle,\n          children: \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: task.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 11\n      }, this) // Click to edit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Assigned to: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: task.assignedTo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"task-actions\",\n      children: [task.stage !== 'To Do' && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => moveTask(task.id, 'To Do'),\n        children: \"To Do\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 36\n      }, this), task.stage !== 'In Progress' && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => moveTask(task.id, 'In Progress'),\n        children: \"In Progress\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 42\n      }, this), task.stage !== 'Done' && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => moveTask(task.id, 'Done'),\n        children: \"Done\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 35\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => deleteTask(task.id),\n        children: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setIsEditing(true),\n        children: \"Edit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 5\n  }, this);\n};\n_s(TaskCard, \"+RX90C3HgifIdhZFyfWOP+b6Gos=\");\n_c = TaskCard;\nexport default TaskCard;\nvar _c;\n$RefreshReg$(_c, \"TaskCard\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","TaskCard","task","moveTask","deleteTask","editTask","assignPerson","_s","isEditing","setIsEditing","newTitle","setNewTitle","title","assignedPerson","setAssignedPerson","handleEditTitle","trim","id","className","children","type","value","style","width","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","onClick","assignedTo","stage","_c","$RefreshReg$"],"sources":["C:/Users/HARD BANK/Documents/ESHA FOLDER/Hackathons/Final Hackathon/task-tracker/src/Taskcard.js"],"sourcesContent":["// import React, { useState } from \"react\";\r\n\r\n// function TaskCard({ task, onEdit, onDelete, onMove }) {\r\n//   const [isEditing, setIsEditing] = useState(false);\r\n//   const [title, setTitle] = useState(task.title);\r\n//   const [assignedTo, setAssignedTo] = useState(task.assignedTo);\r\n\r\n//   const saveEdit = () => {\r\n//     onEdit(task.id, title, assignedTo);\r\n//     setIsEditing(false);\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"task-card\">\r\n//       {isEditing ? (\r\n//         <>\r\n//           <input value={title} onChange={e => setTitle(e.target.value)} />\r\n//           <input value={assignedTo} onChange={e => setAssignedTo(e.target.value)} />\r\n//           <button onClick={saveEdit}>Save</button>\r\n//         </>\r\n//       ) : (\r\n//         <>\r\n//           <h4>{task.title}</h4>\r\n//           <p>Assigned to: {task.assignedTo || \"Unassigned\"}</p>\r\n//           <div className=\"actions\">\r\n//             <button onClick={() => setIsEditing(true)}>Edit</button>\r\n//             <button onClick={() => onDelete(task.id)}>Delete</button>\r\n//             <button onClick={() => onMove(task.id, -1)}>←</button>\r\n//             <button onClick={() => onMove(task.id, 1)}>→</button>\r\n//           </div>\r\n//         </>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default TaskCard;\r\n\r\n  // SOCOND CODE\r\n\r\n// import React, { useState } from 'react';\r\n\r\n// const TaskCard = ({ task, moveTask, deleteTask, editTask, assignPerson }) => {\r\n//   const [editing, setEditing] = useState(false);\r\n//   const [newTitle, setNewTitle] = useState(task.title);\r\n\r\n//   // Handle title edit\r\n//   const handleEditTitle = () => {\r\n//     editTask(task.id, newTitle);\r\n//     setEditing(false);  // Close edit mode\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"task-card\">\r\n//       <div>\r\n//         {/* If editing, show input box; otherwise, show task title */}\r\n//         {editing ? (\r\n//           <div>\r\n//             <input\r\n//               type=\"text\"\r\n//               value={newTitle}\r\n//               onChange={(e) => setNewTitle(e.target.value)}  // Handle title change\r\n//             />\r\n//             <button onClick={handleEditTitle}>Save</button>\r\n//           </div>\r\n//         ) : (\r\n//           <h3 onClick={() => setEditing(true)}>{task.title}</h3>\r\n//         )}\r\n//       </div>\r\n\r\n//       <div>\r\n//         <strong>Assigned to: </strong>\r\n//         <span>{task.assignedTo}</span>\r\n//         {/* Dropdown to assign person */}\r\n//         {/* <select \r\n//           onChange={(e) => assignPerson(task.id, e.target.value)} \r\n//           value={task.assignedTo}\r\n//         >\r\n//           <option value=\"Unassigned\">Unassigned</option>\r\n//           <option value=\"Alice\">Alice</option>\r\n//           <option value=\"Bob\">Bob</option>\r\n//           <option value=\"Charlie\">Charlie</option>\r\n//         </select> */}\r\n//       </div>\r\n\r\n//       <div className=\"task-actions\">\r\n//         {/* Move task buttons */}\r\n//         {task.stage !== 'To Do' && <button onClick={() => moveTask(task.id, 'To Do')}>To Do</button>}\r\n//         {task.stage !== 'In Progress' && <button onClick={() => moveTask(task.id, 'In Progress')}>In Progress</button>}\r\n//         {task.stage !== 'Done' && <button onClick={() => moveTask(task.id, 'Done')}>Done</button>}\r\n\r\n//         {/* Delete task */}\r\n//         <button onClick={() => deleteTask(task.id)}>Delete</button>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default TaskCard;\r\n\r\n// THIRD CODE \r\n\r\nimport React, { useState } from 'react';\r\n\r\nconst TaskCard = ({ task, moveTask, deleteTask, editTask, assignPerson }) => {\r\n  const [isEditing, setIsEditing] = useState(false);  // Track if the task is being edited\r\n  const [newTitle, setNewTitle] = useState(task.title);  // Input value for the new task title\r\n   const [assignedPerson, setAssignedPerson] = useState('');  // Person assigned to task\r\n\r\n  // Handle editing task title\r\n  const handleEditTitle = () => {\r\n    if (newTitle.trim()) {\r\n      editTask(task.id, newTitle);  // Save the new title\r\n      setIsEditing(false);  // Exit edit mode\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"task-card\">\r\n      <div>\r\n        {/* If editing, show input; otherwise, show task title */}\r\n        {isEditing? (\r\n          <div>\r\n            <input\r\n              type=\"text\"\r\n              value={newTitle} style={{width:''\r\n              }}\r\n              onChange={(e) => setNewTitle(e.target.value)}  // Update title while editing\r\n            />\r\n             <input\r\n        type=\"text\"\r\n        value={assignedPerson}\r\n        onChange={(e) => setAssignedPerson(e.target.value)}  // Update task title input\r\n        placeholder=\"assigned...\"\r\n      />\r\n            <button onClick={handleEditTitle}>Save</button>\r\n          </div>\r\n        ) \r\n        : (\r\n          <h3>{task.title}</h3>  // Click to edit\r\n        \r\n        )\r\n}\r\n\r\n        \r\n      </div>\r\n\r\n      <div>\r\n        <strong>Assigned to: </strong>\r\n        <span>{task.assignedTo}</span>\r\n        {/* Dropdown to assign person\r\n        <select \r\n          onChange={(e) => assignPerson(task.id, e.target.value)} \r\n          value={task.assignedTo}\r\n        >\r\n          <option value=\"Unassigned\">Unassigned</option>\r\n          <option value=\"Alice\">Alice</option>\r\n          <option value=\"Bob\">Bob</option>\r\n          <option value=\"Charlie\">Charlie</option>\r\n        </select> */}\r\n      </div>\r\n\r\n      <div className=\"task-actions\">\r\n        {/* Move task buttons */}\r\n        {task.stage !== 'To Do' && <button onClick={() => moveTask(task.id, 'To Do')}>To Do</button>}\r\n        {task.stage !== 'In Progress' && <button onClick={() => moveTask(task.id, 'In Progress')}>In Progress</button>}\r\n        {task.stage !== 'Done' && <button onClick={() => moveTask(task.id, 'Done')}>Done</button>}\r\n\r\n        {/* Delete task */}\r\n        <button onClick={() => deleteTask(task.id)}>Delete</button>\r\n        <button onClick={() => setIsEditing(true)}>Edit</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TaskCard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}